// Medidas de seguridad para evitar creaci√≥n masiva de datos
import { collection, getDocs, query, where, limit } from 'firebase/firestore';
import { db } from '../firebase/config.js';

// L√≠mites de seguridad CONSERVADORES para evitar consumo de cuota
export const SAFETY_LIMITS = {
  MAX_SHELTERS_PER_USER: 3,        // M√°ximo 3 refugios por usuario
  MAX_PETS_PER_USER: 10,           // M√°ximo 10 mascotas por usuario
  MAX_DAILY_CREATIONS: 5,          // M√°ximo 5 creaciones por d√≠a por usuario
  BATCH_SIZE: 50,                  // Tama√±o m√°ximo de lotes (reducido)
  TIMEOUT_MS: 10000                // Timeout de 10 segundos (reducido)
};

// Funci√≥n para verificar l√≠mites antes de crear
export const checkCreationLimits = async (userId, collectionName) => {
  try {
    console.log(`üîí Verificando l√≠mites para usuario ${userId} en ${collectionName}`);
    
    // Verificar l√≠mites por usuario
    const userQuery = query(
      collection(db, collectionName),
      where('ownerId', '==', userId),
      limit(SAFETY_LIMITS.MAX_SHELTERS_PER_USER + 1)
    );
    
    const snapshot = await getDocs(userQuery);
    const userCount = snapshot.size;
    
    console.log(`üìä Usuario ${userId} tiene ${userCount} ${collectionName}`);
    
    // Verificar l√≠mites espec√≠ficos por colecci√≥n
    let maxAllowed = 0;
    switch (collectionName) {
      case 'shelters':
        maxAllowed = SAFETY_LIMITS.MAX_SHELTERS_PER_USER;
        break;
      case 'pets':
        maxAllowed = SAFETY_LIMITS.MAX_PETS_PER_USER;
        break;
      default:
        maxAllowed = 50; // L√≠mite gen√©rico
    }
    
    if (userCount >= maxAllowed) {
      throw new Error(`‚ùå L√≠mite alcanzado: Has creado el m√°ximo de ${maxAllowed} ${collectionName}. Contacta al administrador si necesitas m√°s.`);
    }
    
    console.log(`‚úÖ L√≠mites verificados. Usuario puede crear m√°s ${collectionName}`);
    return { allowed: true, current: userCount, max: maxAllowed };
    
  } catch (error) {
    console.error('Error verificando l√≠mites:', error);
    throw error;
  }
};

// Funci√≥n para verificar l√≠mites diarios
export const checkDailyLimits = async (userId) => {
  try {
    const today = new Date().toISOString().split('T')[0];
    const todayStart = new Date(today + 'T00:00:00.000Z').toISOString();
    
    // Verificar creaciones de hoy
    const todayQuery = query(
      collection(db, 'userActivity'),
      where('userId', '==', userId),
      where('date', '==', today),
      limit(SAFETY_LIMITS.MAX_DAILY_CREATIONS + 1)
    );
    
    const snapshot = await getDocs(todayQuery);
    const todayCount = snapshot.size;
    
    if (todayCount >= SAFETY_LIMITS.MAX_DAILY_CREATIONS) {
      throw new Error(`‚ùå L√≠mite diario alcanzado: Has creado ${todayCount} elementos hoy. Intenta ma√±ana.`);
    }
    
    return { allowed: true, today: todayCount, max: SAFETY_LIMITS.MAX_DAILY_CREATIONS };
    
  } catch (error) {
    console.error('Error verificando l√≠mites diarios:', error);
    throw error;
  }
};

// Funci√≥n para registrar actividad del usuario
export const logUserActivity = async (userId, action, details = {}) => {
  try {
    const activityData = {
      userId,
      action,
      details,
      timestamp: new Date().toISOString(),
      date: new Date().toISOString().split('T')[0],
      ip: 'unknown' // En un entorno real, obtendr√≠as la IP
    };
    
    // Aqu√≠ podr√≠as guardar en una colecci√≥n de actividad
    console.log('üìù Actividad registrada:', activityData);
    return true;
    
  } catch (error) {
    console.error('Error registrando actividad:', error);
    return false;
  }
};

// Funci√≥n para verificar si un usuario es administrador
export const isAdmin = (userId) => {
  // Lista de administradores (en producci√≥n, esto vendr√≠a de la base de datos)
  const adminUsers = [
    'admin-user-id-1',
    'admin-user-id-2'
  ];
  
  return adminUsers.includes(userId);
};

// Funci√≥n para validar datos antes de crear
export const validateCreationData = (data, collectionName) => {
  const errors = [];
  
  // Validaciones b√°sicas
  if (!data || typeof data !== 'object') {
    errors.push('Datos inv√°lidos');
  }
  
  // Validaciones espec√≠ficas por colecci√≥n
  switch (collectionName) {
    case 'shelters':
      if (!data.name || data.name.length < 3) {
        errors.push('Nombre del refugio debe tener al menos 3 caracteres');
      }
      if (data.name && data.name.length > 100) {
        errors.push('Nombre del refugio no puede exceder 100 caracteres');
      }
      break;
      
    case 'pets':
      if (!data.name || data.name.length < 2) {
        errors.push('Nombre de la mascota debe tener al menos 2 caracteres');
      }
      if (!data.type) {
        errors.push('Tipo de mascota es requerido');
      }
      break;
  }
  
  // Validar que no contenga datos maliciosos
  const suspiciousPatterns = [
    /<script/i,
    /javascript:/i,
    /on\w+\s*=/i,
    /eval\(/i,
    /function\s*\(/i
  ];
  
  const dataString = JSON.stringify(data);
  for (const pattern of suspiciousPatterns) {
    if (pattern.test(dataString)) {
      errors.push('Datos contienen contenido sospechoso');
      break;
    }
  }
  
  if (errors.length > 0) {
    throw new Error(`‚ùå Validaci√≥n fallida: ${errors.join(', ')}`);
  }
  
  return true;
};

// Funci√≥n para crear con medidas de seguridad
export const safeCreate = async (collectionName, data, userId) => {
  try {
    console.log(`üõ°Ô∏è Creaci√≥n segura en ${collectionName} para usuario ${userId}`);
    
    // 1. Validar datos
    validateCreationData(data, collectionName);
    
    // 2. Verificar l√≠mites
    await checkCreationLimits(userId, collectionName);
    await checkDailyLimits(userId);
    
    // 3. Registrar actividad
    await logUserActivity(userId, `create_${collectionName}`, { collectionName });
    
    console.log(`‚úÖ Todas las verificaciones pasaron. Procediendo con la creaci√≥n.`);
    return { success: true, message: 'Verificaciones completadas' };
    
  } catch (error) {
    console.error('‚ùå Error en verificaci√≥n de seguridad:', error);
    throw error;
  }
};

// Funci√≥n para monitorear el tama√±o de la base de datos
export const monitorDatabaseSize = async () => {
  try {
    console.log('üìä Monitoreando tama√±o de la base de datos...');
    
    const collections = ['shelters', 'pets', 'users', 'adoptionRequests'];
    const counts = {};
    
    for (const collectionName of collections) {
      try {
        const snapshot = await getDocs(collection(db, collectionName));
        counts[collectionName] = snapshot.size;
        console.log(`üìö ${collectionName}: ${snapshot.size} documentos`);
      } catch (error) {
        console.error(`Error contando ${collectionName}:`, error);
        counts[collectionName] = 'error';
      }
    }
    
    // Alertar si hay demasiados documentos
    const totalShelters = counts.shelters || 0;
    if (totalShelters > 1000) {
      console.warn(`‚ö†Ô∏è ADVERTENCIA: Hay ${totalShelters} refugios en la base de datos. Considera limpiar datos de prueba.`);
    }
    
    return counts;
    
  } catch (error) {
    console.error('Error monitoreando base de datos:', error);
    return {};
  }
};

// Funci√≥n para limpiar datos de prueba autom√°ticamente
export const autoCleanupTestData = async () => {
  try {
    console.log('üßπ Iniciando limpieza autom√°tica de datos de prueba...');
    
    // Buscar refugios de prueba (que contengan ciertos patrones)
    const testPatterns = ['test', 'demo', 'ejemplo', 'sample', 'prueba'];
    const sheltersQuery = query(collection(db, 'shelters'));
    const sheltersSnapshot = await getDocs(sheltersQuery);
    
    let cleanedCount = 0;
    const testShelters = sheltersSnapshot.docs.filter(doc => {
      const data = doc.data();
      const name = (data.name || '').toLowerCase();
      return testPatterns.some(pattern => name.includes(pattern));
    });
    
    console.log(`üîç Encontrados ${testShelters.length} refugios de prueba`);
    
    if (testShelters.length > 0) {
      console.log('‚ö†Ô∏è Se encontraron refugios de prueba. Considera limpiarlos manualmente.');
      console.log('Refugios de prueba:', testShelters.map(doc => ({ id: doc.id, name: doc.data().name })));
    }
    
    return { cleaned: cleanedCount, found: testShelters.length };
    
  } catch (error) {
    console.error('Error en limpieza autom√°tica:', error);
    return { cleaned: 0, found: 0 };
  }
};

// Exportar todas las funciones
export default {
  SAFETY_LIMITS,
  checkCreationLimits,
  checkDailyLimits,
  logUserActivity,
  isAdmin,
  validateCreationData,
  safeCreate,
  monitorDatabaseSize,
  autoCleanupTestData
};
