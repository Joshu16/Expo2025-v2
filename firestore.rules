rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Función auxiliar para verificar si el usuario está autenticado
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Función auxiliar para verificar si el usuario es el propietario
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Función auxiliar para verificar si el usuario es participante en una conversación
    function isParticipant(participants) {
      return isAuthenticated() && request.auth.uid in participants;
    }
    
    // Función auxiliar para validar datos de entrada
    function isValidString(field, maxLength) {
      return field is string && field.size() > 0 && field.size() <= maxLength;
    }
    
    // Función auxiliar para validar email
    function isValidEmail(email) {
      return email is string && email.matches('.*@.*\\..*');
    }
    
    // Función auxiliar para validar URL de imagen
    function isValidImageUrl(url) {
      return url is string && url.matches('https?://.*');
    }
    
    // Función para validar datos de mascota
    function isValidPetData(data) {
      return data.name is string && data.name.size() > 0 && data.name.size() <= 100 &&
             data.type is string && data.type in ['Perro', 'Gato', 'Conejo', 'Hamster'] &&
             data.location is string && data.location.size() > 0 &&
             data.img is string && data.img.matches('https?://.*') &&
             data.ownerId is string && data.ownerId.size() > 0;
    }
    
    // Función para validar datos de usuario
    function isValidUserData(data) {
      return data.name is string && data.name.size() > 0 && data.name.size() <= 100 &&
             data.email is string && data.email.matches('.*@.*\\..*');
    }
    
    // Función para validar datos de refugio
    function isValidShelterData(data) {
      return data.name is string && data.name.size() > 0 && data.name.size() <= 100 &&
             data.location is string && data.location.size() > 0 &&
             data.ownerId is string && data.ownerId.size() > 0;
    }
    
    // Función para validar datos de solicitud de adopción
    function isValidAdoptionRequestData(data) {
      return data.userId is string && data.userId.size() > 0 &&
             data.ownerId is string && data.ownerId.size() > 0 &&
             data.petId is string && data.petId.size() > 0 &&
             data.adopterName is string && data.adopterName.size() > 0 &&
             data.adopterEmail is string && data.adopterEmail.matches('.*@.*\\..*');
    }
    
    // Función para validar datos de mensaje
    function isValidMessageData(data) {
      return data.senderId is string && data.senderId.size() > 0 &&
             data.message is string && data.message.size() > 0 && data.message.size() <= 1000 &&
             data.conversationId is string && data.conversationId.size() > 0;
    }
    
    // Función para validar datos de notificación
    function isValidNotificationData(data) {
      return data.userId is string && data.userId.size() > 0 &&
             data.title is string && data.title.size() > 0 && data.title.size() <= 200 &&
             data.message is string && data.message.size() > 0 && data.message.size() <= 500;
    }
    
    // Reglas para usuarios
    match /users/{userId} {
      allow read: if isAuthenticated() && request.auth.uid == userId;
      allow write: if isAuthenticated() && 
        request.auth.uid == userId &&
        isValidUserData(request.resource.data);
      allow create: if isAuthenticated() && 
        request.auth.uid == userId &&
        isValidUserData(request.resource.data);
    }
    
    // Reglas para refugios
    match /shelters/{shelterId} {
      allow read: if true; // Todos pueden leer refugios
      allow create: if isAuthenticated() && 
        request.auth.uid == request.resource.data.ownerId &&
        isValidShelterData(request.resource.data);
      allow update: if isAuthenticated() && 
        request.auth.uid == resource.data.ownerId &&
        isValidShelterData(request.resource.data);
      allow delete: if isAuthenticated() && 
        request.auth.uid == resource.data.ownerId;
    }
    
    // Reglas para mascotas - PERMISOS TEMPORALMENTE RELAJADOS
    match /pets/{petId} {
      allow read: if true; // Todos pueden leer mascotas
      allow create: if isAuthenticated(); // Solo requiere autenticación
      allow update: if isAuthenticated(); // Solo requiere autenticación
      allow delete: if isAuthenticated(); // Solo requiere autenticación
    }
    
    // Reglas para categorías
    match /categories/{categoryId} {
      allow read: if true;
      allow write: if isAuthenticated() && 
        isValidString(request.resource.data.name, 50);
      allow create: if isAuthenticated() && 
        isValidString(request.resource.data.name, 50);
    }
    
    // Reglas para favoritos - PERMISOS RELAJADOS
    match /favorites/{favoriteId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated();
      allow create: if isAuthenticated();
    }
    
    // Reglas para solicitudes de adopción - PERMISOS RELAJADOS
    match /adoptionRequests/{requestId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated();
    }
    
    // Reglas para conversaciones - PERMISOS RELAJADOS
    match /conversations/{conversationId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated();
      allow create: if isAuthenticated();
    }
    
    // Reglas para mensajes - PERMISOS RELAJADOS
    match /messages/{messageId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated();
    }
    
    // Reglas para notificaciones - PERMISOS RELAJADOS
    match /notifications/{notificationId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated();
      allow create: if isAuthenticated();
    }
    
    // Denegar acceso a cualquier otra colección
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
