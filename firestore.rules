rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Función auxiliar para verificar si el usuario está autenticado
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Función auxiliar para verificar si el usuario es el propietario
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Función auxiliar para verificar si el usuario es participante en una conversación
    function isParticipant(participants) {
      return isAuthenticated() && request.auth.uid in participants;
    }
    
    // Función auxiliar para validar datos de entrada
    function isValidString(field, maxLength) {
      return field is string && field.size() <= maxLength;
    }
    
    // Función auxiliar para validar email
    function isValidEmail(email) {
      return email is string && email.matches('.*@.*\\..*');
    }
    
    // Función auxiliar para validar URL de imagen
    function isValidImageUrl(url) {
      return url is string && url.matches('https://.*');
    }
    
    // Reglas para usuarios
    match /users/{userId} {
      allow read, write: if isAuthenticated() && request.auth.uid == userId;
      allow create: if isAuthenticated() && 
        request.auth.uid == userId;
    }
    
    // Reglas para refugios
    match /shelters/{shelterId} {
      allow read: if true; // Todos pueden leer refugios
      allow create: if isAuthenticated() && 
        request.auth.uid == resource.data.ownerId;
      allow update, delete: if isAuthenticated() && 
        request.auth.uid == resource.data.ownerId;
    }
    
    // Reglas para mascotas
    match /pets/{petId} {
      allow read: if true; // Todos pueden leer mascotas
      allow create: if isAuthenticated() && 
        request.auth.uid == resource.data.ownerId;
      allow update, delete: if isAuthenticated() && 
        request.auth.uid == resource.data.ownerId;
    }
    
    // Reglas para categorías
    match /categories/{categoryId} {
      allow read: if true;
      allow write: if isAuthenticated();
    }
    
    // Reglas para favoritos
    match /favorites/{favoriteId} {
      allow read, write: if isAuthenticated() && 
        request.auth.uid == resource.data.userId;
      allow create: if isAuthenticated() && 
        request.auth.uid == resource.data.userId;
    }
    
    // Reglas para solicitudes de adopción
    match /adoptionRequests/{requestId} {
      allow read, create: if isAuthenticated() && 
        request.auth.uid == resource.data.userId;
      allow update: if isAuthenticated() && 
        (request.auth.uid == resource.data.userId || 
         request.auth.uid == resource.data.ownerId);
    }
    
    // Reglas para conversaciones
    match /conversations/{conversationId} {
      allow read, write: if isAuthenticated() && 
        request.auth.uid in resource.data.participants;
      allow create: if isAuthenticated() && 
        request.auth.uid in resource.data.participants;
    }
    
    // Reglas para mensajes
    match /messages/{messageId} {
      allow read, write: if isAuthenticated();
      allow create: if isAuthenticated() && 
        request.auth.uid == resource.data.senderId;
    }
    
    // Reglas para notificaciones
    match /notifications/{notificationId} {
      allow read, write: if isAuthenticated() && 
        request.auth.uid == resource.data.userId;
      allow create: if isAuthenticated() && 
        request.auth.uid == resource.data.userId;
    }
    
    // Denegar acceso a cualquier otra colección
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
